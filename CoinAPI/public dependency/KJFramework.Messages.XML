<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KJFramework.Messages</name>
    </assembly>
    <members>
        <member name="T:KJFramework.Messages.Analysers.AnalyseResult">
            <summary>
                只能类型分析结果，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Analysers.IAnalyseResult">
            <summary>
                只能类型分析结果元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Analysers.AnalyseResult.VT">
            <summary>
                获取值类型标示
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Analysers.AnalyseResult.Property">
            <summary>
                获取或设置属性信息
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Analysers.AnalyseResult.Attribute">
            <summary>
                获取或设置智能属性标签
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Analysers.AnalyseResult.VTStruct">
            <summary>
                获取或设置内部VT结构
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Analysers.AnalyseResult.HasCacheFinished">
            <summary>
                获取或设置一个值，该指标是了当前属性是否已经达到了完整缓存
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Analysers.AnalyseResult.Nullable">
            <summary>
                获取或设置字段是否为可空字段类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Analysers.ToBytesIntellectTypeAnalyser">
            <summary>
                可转换为元数据的智能类型分析器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Analysers.IntellectTypeAnalyser`2">
            <summary>
                类型分析器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Analysers.IIntellectTypeAnalyser`2">
            <summary>
                智能类型分析器元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Analysers.IIntellectTypeAnalyser`2.Analyse(`1)">
            <summary>
                分析一个类型中的所有智能属性
            </summary>
            <param name="type">要分析的类型</param>
            <returns>返回分析的结果</returns>
        </member>
        <member name="M:KJFramework.Messages.Analysers.IIntellectTypeAnalyser`2.Clear">
            <summary>
                清空当前所有的分析结果
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Analysers.IntellectTypeAnalyser`2.GetObject(System.String)">
            <summary>
                获取指定对象
            </summary>
            <param name="token">类型编号</param>
            <returns>返回分析结果</returns>
        </member>
        <member name="M:KJFramework.Messages.Analysers.IntellectTypeAnalyser`2.RegistAnalyseResult(System.String,`0)">
            <summary>
                注册一个分析结果
            </summary>
            <param name="token">类型编号</param>
            <param name="result">分析结果</param>
        </member>
        <member name="M:KJFramework.Messages.Analysers.IntellectTypeAnalyser`2.Analyse(`1)">
            <summary>
                分析一个类型中的所有智能属性
            </summary>
            <param name="type">要分析的类型</param>
            <returns>返回分析的结果</returns>
        </member>
        <member name="M:KJFramework.Messages.Analysers.IntellectTypeAnalyser`2.Clear">
            <summary>
                清空当前所有的分析结果
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Analysers.ToBytesIntellectTypeAnalyser.Analyse(KJFramework.Messages.Contracts.IIntellectObject)">
            <summary>
                分析一个类型中的所有智能属性
            </summary>
            <param name="obj">要分析的类型</param>
            <returns>返回分析的结果</returns>
        </member>
        <member name="T:KJFramework.Messages.Analysers.ToBytesAnalyseResult">
            <summary>
                可转化为元数据的分析结果，提供了相关的基本操作。
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Analysers.ToBytesAnalyseResult.CacheProcess">
            <summary>
                热处理函数
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Analysers.ToBytesAnalyseResult.GetValue``1(System.Object)">
            <summary>
                获取当前字段值
            </summary>
            <param name="instance">对象实例</param>
            <returns>值</returns>
        </member>
        <member name="M:KJFramework.Messages.Analysers.ToBytesAnalyseResult.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Analysers.ToBytesAnalyseResult.TargetType">
            <summary>
                获取或设置目标对象类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Analysers.ToStringHandler">
            <summary>
                字符串转换约束委托
            </summary>
            <param name="type">转换的类型</param>
            <param name="stringBuilder">字符串构建器</param>
            <param name="property">字段信息</param>
            <param name="instance">对象实例</param>
            <param name="space">缩进空间</param>
            <param name="isArrayLoop">是否陷入数组循环的标示</param>
        </member>
        <member name="T:KJFramework.Messages.Analysers.GetObjectAnalyseResult">
            <summary>
                可转化为对象的分析结果，提供了相关的基本操作。
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Analysers.GetObjectAnalyseResult.CacheProcess">
            <summary>
                热处理函数
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Analysers.GetObjectAnalyseResult.StringConverter">
            <summary>
                字符串转换器
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Analysers.GetObjectAnalyseResult.TargetType">
            <summary>
                 获取或设置目标对象类型
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Analysers.GetObjectAnalyseResult.GetValue(System.Object)">
            <summary>
                获取当前字段值
            </summary>
            <param name="instance">对象实例</param>
            <returns>值</returns>
        </member>
        <member name="M:KJFramework.Messages.Analysers.GetObjectAnalyseResult.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Analysers.GetObjectAnalyseResult.SetValue``1(System.Object,``0)">
            <summary>
             设置当前属性值
            </summary>
            <typeparam name="T">属性类型</typeparam>
            <param name="instance">目标对象</param>
            <param name="value">属性数值</param>
        </member>
        <member name="M:KJFramework.Messages.Analysers.GetObjectAnalyseResult.SetValue(System.Object,System.Object[])">
            <summary>
                为当前字段设置值
            </summary>
            <param name="instance">对象实例</param>
            <param name="args">值</param>
        </member>
        <member name="T:KJFramework.Messages.Analysers.GetObjectIntellectTypeAnalyser">
            <summary>
                可转换为对象的智能类型分析器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Analysers.GetObjectIntellectTypeAnalyser.Analyse(System.Type)">
            <summary>
                分析一个类型中的所有智能属性
            </summary>
            <param name="type">要分析的类型</param>
            <returns>返回分析的结果</returns>
        </member>
        <member name="T:KJFramework.Messages.Attributes.IIntellectProperty">
            <summary>
                智能属性元接口，提供了相关的基本属性结构。
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Attributes.IIntellectProperty.Id">
            <summary>
                获取属性顺序编号
                <para>* 此编号不能重复。</para>
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Attributes.IIntellectProperty.IsRequire">
            <summary>
                获取一个值，该值标示了当前属性是否必须拥有值。
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Attributes.IIntellectProperty.NeedExtendAction">
            <summary>
                获取一个值，该值标示了当前属性是否需要进行扩展构造动作。
                <para>* 此属影响范围：第三方消息结构定义器。</para>
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Attributes.IIntellectProperty.Tag">
            <summary>
                获取附属名称
                <para>* 此属影响范围：第三方消息结构定义器。</para>
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Attributes.IntellectPropertyAttribute">
            <summary>
                智能属性标签，提供了自动编译属性的基础能力支持。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Attributes.IntellectPropertyAttribute.#ctor(System.Int32)">
            <summary>
                智能属性标签，提供了自动编译属性的基础能力支持。
            </summary>
            <param name="id">顺序编号</param>
        </member>
        <member name="M:KJFramework.Messages.Attributes.IntellectPropertyAttribute.#ctor(System.Int32,System.Boolean)">
            <summary>
                智能属性标签，提供了自动编译属性的基础能力支持。
            </summary>
            <param name="id">顺序编号</param>
            <param name="isRequire">标示了当前属性是否必须拥有值</param>
        </member>
        <member name="P:KJFramework.Messages.Attributes.IntellectPropertyAttribute.Id">
            <summary>
                获取或设置属性顺序编号
                <para>* 此编号不能重复。</para>
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Attributes.IntellectPropertyAttribute.IsRequire">
            <summary>
                获取或设置一个值，该值标示了当前属性是否必须拥有值。
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Attributes.IntellectPropertyAttribute.AllowDefaultNull">
            <summary>
                获取或设置一个值，该值标示了当前字段是否支持"默认值不参与传输"特性
                <para>* 此特性仅对值类型字段才有意义</para>
                <para>* 如果您将该属性设置为true, 并且被标记字段当前包含的值等于我们框架内部所设置的默认值，则此字段将会不参与序列化过程</para>
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Attributes.IntellectPropertyAttribute.NeedExtendAction">
            <summary>
                获取或设置一个值，该值标示了当前属性是否需要进行扩展构造动作。
                <para>* 此属影响范围：第三方消息结构定义器。</para>
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Attributes.IntellectPropertyAttribute.Tag">
            <summary>
                获取或设置附属名称
                <para>* 此属影响范围：第三方消息结构定义器。</para>
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Configuration.MetadataObjectSetting">
            <summary>
              元数据对象形式下的设置集
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Configuration.MetadataObjectSetting.TYPE_BOUNDARY">
            <summary>
              获取一个值，该值标示了可扩展类型与系统内置类型的临界值
              <para>* 默认值为: 127</para>
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Configuration.MetadataObjectSetting.ALLOW_GET_NULL_ID_DEFAULT_VALUE">
            <summary>
              获取或设置一个值，该值标示了当对一个不存在的ID进行Get操作时，当前元数据对象是否允许返回此ID所代表的类型的默认值
              <para>* 默认值为: false</para>
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Contracts.ICompatibleObject">
            <summary>
                可兼容对象元接口， 提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Contracts.ICompatibleObject.GetParameter(System.Int32)">
            <summary>
                获取具有指定编号的未知参数
            </summary>
            <param name="id">编号</param>
            <returns>返回未知参数</returns>
        </member>
        <member name="M:KJFramework.Messages.Contracts.ICompatibleObject.GetParameters">
            <summary>
                获取所有未知参数
            </summary>
            <returns>返回未知参数集合</returns>
        </member>
        <member name="P:KJFramework.Messages.Contracts.ICompatibleObject.HasParameter">
            <summary>
                获取一个值，该值标示了当前是否存在未知参数。
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Contracts.IIntellectObject">
            <summary>
                智能对象接口，提供了对于智能转换二进制能力的基础支持。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Contracts.IIntellectObject.Bind">
            <summary>
                绑定到元数据
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Contracts.IIntellectObject.Body">
            <summary>
                获取或设置二进制数据体
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Contracts.IIntellectObject.IsBind">
            <summary>
                获取一个值，该值表示了当前是否已经从第三方客户数据转换为元数据。
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Contracts.IIntellectObject.CompatibleMode">
            <summary>
                获取一个值，该值表示了当前实体类是不是以兼容模式解析的。
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Contracts.IntellectObject">
            <summary>
                智能对象父类，提供了对于与二进制数据交互的基础能力。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Contracts.IntellectObject.Bind">
            <summary>
                绑定到元数据
            </summary>
            <exception cref="T:System.MethodAccessException">错误的类型权限定义</exception>
        </member>
        <member name="M:KJFramework.Messages.Contracts.IntellectObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:KJFramework.Messages.Contracts.IntellectObject.ToString(System.String,System.Boolean,System.Reflection.PropertyInfo)">
            <summary>
                内部方法，用于将一个对象转换为字符串的形式表现出来
            </summary>
            <param name="space">缩进空间</param>
            <param name="isArrayLoop">是否陷入数组循环的标示</param>
            <param name="property">字段信息</param>
            <returns>返回标示当前对象的字符串</returns>
        </member>
        <member name="P:KJFramework.Messages.Contracts.IntellectObject.Body">
            <summary>
                获取或设置二进制数据体
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Contracts.IntellectObject.IsBind">
            <summary>
                获取一个值，该值表示了当前是否已经从第三方客户数据转换为元数据。
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Contracts.IntellectObject.CompatibleMode">
            <summary>
                获取一个值，该值表示了当前实体类是不是以兼容模式解析的。
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Contracts.IntellectObject.IsPickup">
            <summary>
                获取一个值，该值表示了当前是否已经从元数据第转换为三方客户数据。
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Contracts.IUnknownParameter">
            <summary>
                未知参数元接口，提供了相关的基本操作。
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Contracts.IUnknownParameter.Id">
            <summary>
                获取参数编号
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Contracts.IUnknownParameter.Content">
            <summary>
                获取参数元数据
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Contracts.MetadataContainer">
            <summary>
              元数据对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Types.ResourceBlock">
            <summary>
               资源块对象
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Types.ResourceBlock.GetAttribute(System.Byte)">
            <summary>
                获取一个指定key的属性值
            </summary>
            <param name="id">属性对应的Id值</param>
            <returns>返回一个属性value</returns>
        </member>
        <member name="M:KJFramework.Messages.Types.ResourceBlock.GetAttributeAsType``1(System.Byte)">
            <summary>
                获取一个指定key的属性值
                <para>* 此方法不支持: T = 智能对象类型</para>
            </summary>
            <param name="id">属性对应的Id值</param>
            <returns>返回一个属性value</returns>
            <remarks>
                * 强烈建议使用此方法之前，先使用IsAttibuteExsits()方法进行判断。
            </remarks>
            <exception cref="T:KJFramework.Messages.Exceptions.SpecificKeyNotExistsException">指定的key不存在</exception>
        </member>
        <member name="M:KJFramework.Messages.Types.ResourceBlock.TryGetAttributeAsType``1(System.Byte,``0@)">
            <summary>
                尝试获取一个指定key的属性值
                <para>* 此方法不支持: T = 智能对象类型</para>
            </summary>
            <param name="id">属性对应的Id值</param>
            <param name="value">输出的参数值</param>
            <returns>如果当前对象内部不存在指定的key, 则返回false, 否则返回true.</returns>
        </member>
        <member name="M:KJFramework.Messages.Types.ResourceBlock.SetAttribute(System.Byte,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                设置一个指定key的属性值
            </summary>
            <param name="id">设置属性对应的id</param>
            <param name="baseValueStored">设置属性的value</param>
            <exception cref="T:System.ArgumentNullException">baseValueStored不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.Types.ResourceBlock.IsAttibuteExsits(System.Byte)">
            <summary>
                是否存在指定key的属性
            </summary>
            <param name="id">指定key</param>
            <returns>是否移除</returns>
        </member>
        <member name="M:KJFramework.Messages.Types.ResourceBlock.RemoveAttribute(System.Byte)">
            <summary>
                移除指定key的属性
            </summary>
            <param name="id">指定key</param>
        </member>
        <member name="M:KJFramework.Messages.Types.ResourceBlock.ToString">
            <summary>
               为当前资源块提供可阅读的输出信息
            </summary>
            <returns>返回内部所有字段可阅读状态的字符串信息</returns>
        </member>
        <member name="M:KJFramework.Messages.Types.ResourceBlock.ToString(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.Byte,KJFramework.Messages.ValueStored.BaseValueStored})">
            <summary>
                内部方法，用于将一个对象转换为字符串的形式表现出来
            </summary>
            <param name="space">缩进空间</param>
            <param name="isArrayLoop">是否陷入数组循环的标示</param>
            <param name="valueStoreds">集合信息</param>
            <returns>返回标示当前对象的字符串</returns>
        </member>
        <member name="T:KJFramework.Messages.Contracts.UnknownParameter">
            <summary>
                未知参数，提供了相关的基本操作。
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Contracts.UnknownParameter.Id">
            <summary>
                获取参数编号
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Contracts.UnknownParameter.Content">
            <summary>
                获取参数元数据
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Engine.MetadataObjectEngine">
            <summary>
                元数据对象引擎，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Engine.MetadataObjectEngine.ToBytes(KJFramework.Messages.Types.ResourceBlock)">
            <summary>
                第三方数据转换成元数据  
            </summary>
            <param name="metadata">第三方数据对象</param>
            <returns>元数据的二进制表现形式</returns>
        </member>
        <member name="M:KJFramework.Messages.Engine.MetadataObjectEngine.ToBytes(KJFramework.Messages.Types.ResourceBlock,KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
                将一个对象字段转换为二进制元数据
            </summary>
            <param name="metadata">需要转换成元数据的Value字典</param>
            <param name="proxy">内存段代理器</param>
        </member>
        <member name="M:KJFramework.Messages.Engine.MetadataObjectEngine.GetObject(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
                将一个二进制元数据转换为对象字段
            </summary>
            <param name="byteData">需要反序列化的二进制数组</param>
            <param name="offset">内存段偏移</param>
            <param name="length">内存段长度</param>
        </member>
        <member name="T:KJFramework.Messages.Enums.CompressionTypes">
            <summary>
                使用的压缩方式枚举
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.CompressionTypes.GZip">
            <summary>
                GZip 压缩格式
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.CompressionTypes.BZip2">
            <summary>
                BZip2 压缩格式
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Exceptions.DefineNoMeaningException">
            <summary>
                定义无意义异常
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Exceptions.DefineNoMeaningException.#ctor(System.String)">
            <summary>
                定义无意义异常
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="T:KJFramework.Messages.Exceptions.ExceptionMessage">
            <summary>
                异常信息静态存储结构
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Exceptions.ExceptionMessage.EX_PROPERTY_VALUE">
            <summary>
                字段值为空的错误提示语
            </summary>
        </member>
        <!-- 对于成员“T:KJFramework.Messages.Exceptions.PropertyNullValueException”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:KJFramework.Messages.Exceptions.PropertyNullValueException.#ctor(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="T:KJFramework.Messages.Exceptions.SpecificKeyNotExistsException">
            <summary>
                指定的key不存在异常
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Exceptions.SpecificKeyNotExistsException.#ctor(System.String)">
            <summary>
                指定的key不存在异常
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="T:KJFramework.Messages.Exceptions.UnexpectedValueException">
            <summary>
                未期待的结果异常
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Exceptions.UnexpectedValueException.#ctor(System.String)">
            <summary>
                未期待的结果异常
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="T:KJFramework.Messages.Helpers.DataHelper">
            <summary>
                数据帮助器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Helpers.DataHelper.ToBytes(System.Object)">
            <summary>
                将指定类型的实例序列化为二进制数据
            </summary>
            <param name="instance">实例对象</param>
            <returns>返回序列化后的二进制数据, 如果instance为null, 则返回null</returns>
        </member>
        <member name="M:KJFramework.Messages.Helpers.DataHelper.ToBytes``1(System.Object)">
            <summary>
                将指定类型的实例序列化为二进制数据
            </summary>
            <param name="instance">实例对象</param>
            <returns>返回序列化后的二进制数据, 如果instance为null, 则返回null</returns>
        </member>
        <member name="M:KJFramework.Messages.Helpers.DataHelper.ToBytes(System.Type,System.Object)">
            <summary>
                将指定类型的实例序列化为二进制数据
            </summary>
            <param name="type">类型</param>
            <param name="instance">实例对象</param>
            <returns>返回序列化后的二进制数据, 如果instance为null, 则返回null</returns>
            <exception cref="T:System.ArgumentNullException">type 参数不能为空</exception>
            <exception cref="T:System.NotSupportedException">不被支持的类型</exception>
        </member>
        <member name="M:KJFramework.Messages.Helpers.DataHelper.ToBytes(System.Type,System.Object,KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
                将指定类型的实例序列化为二进制数据
            </summary>
            <param name="type">类型</param>
            <param name="instance">实例对象</param>
            <param name="proxy">内存段代理器</param>
            <returns>返回序列化后的二进制数据, 如果instance为null, 则返回null</returns>
            <exception cref="T:System.NotSupportedException">不被支持的类型</exception>
        </member>
        <member name="M:KJFramework.Messages.Helpers.DataHelper.GetObject``1(System.Byte[])">
            <summary>
                将二进制数据反序列化成指定类型对象
            </summary>
            <param name="data">二进制数据</param>
            <returns>返回反序列化后的对象, 如果data为null, 则返回null</returns>
        </member>
        <member name="M:KJFramework.Messages.Helpers.DataHelper.GetObject(System.Type,System.Byte[])">
            <summary>
                将二进制数据反序列化成指定类型对象
            </summary>
            <param name="type">类型</param>
            <param name="data">二进制数据</param>
            <returns>返回反序列化后的对象, 如果data为null, 则返回null</returns>
            <exception cref="T:System.ArgumentNullException">type 参数不能为空</exception>
        </member>
        <member name="T:KJFramework.Messages.Engine.IntellectObjectEngine">
            <summary>
                智能对象引擎，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Engine.IntellectObjectEngine.Preheat(KJFramework.Messages.Contracts.IIntellectObject)">
            <summary>
                预热一个智能对象
            </summary>
            <param name="intellectObject">需要预热的智能对象</param>
        </member>
        <member name="M:KJFramework.Messages.Engine.IntellectObjectEngine.ToBytes(KJFramework.Messages.Contracts.IIntellectObject)">
            <summary>
                将一个智能对象转换为二进制元数据
            </summary>
            <param name="obj">智能对象</param>
            <returns>返回二进制元数据</returns>
            <exception cref="T:KJFramework.Messages.Exceptions.PropertyNullValueException">字段相关的Attribute.IsRequire = true, 并且该字段的值为null</exception>
            <exception cref="T:KJFramework.Messages.Exceptions.UnexpectedValueException">不期待的结果异常，通常因为对Blob类型的取值 = null</exception>
            <exception cref="T:System.NotSupportedException">系统不支持的序列化类型</exception>
            <exception cref="T:KJFramework.Messages.Exceptions.DefineNoMeaningException">无意义的智能字段Attribute值</exception>
            <exception cref="T:System.MethodAccessException">类型权限定义错误</exception>
            <exception cref="N:KJFramework.Exception">内部错误</exception>
        </member>
        <member name="M:KJFramework.Messages.Engine.IntellectObjectEngine.ToBytes(KJFramework.Messages.Contracts.IIntellectObject,KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
                将一个智能对象转换为二进制元数据
            </summary>
            <param name="obj">智能对象</param>
            <param name="proxy">内存段代理器</param>
            <returns>返回当前已经被序列化对象的总体长度</returns>
        </member>
        <member name="M:KJFramework.Messages.Engine.IntellectObjectEngine.GetObject``1(System.Byte[])">
            <summary>
                将一个元数据转换为特定类型的对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="data">元数据</param>
            <returns>返回转换后的特定对象</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.Engine.IntellectObjectEngine.GetObject``1(System.Type,System.Byte[])">
            <summary>
                将一个元数据转换为特定类型的对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="target">特定的对象</param>
            <param name="data">元数据</param>
            <returns>返回转换后的特定对象</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.Engine.IntellectObjectEngine.GetObject``1(System.Type,System.Byte[],System.Int32,System.Int32)">
            <summary>
                将一个元数据转换为特定类型的对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="target">特定的对象</param>
            <param name="data">元数据</param>
            <param name="offset">元数据偏移</param>
            <param name="length">可用元数据长度</param>
            <returns>返回转换后的特定对象</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="T:KJFramework.Messages.Helpers.BitConvertHelper">
            <summary>
                类型转换相关帮助器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Helpers.BitConvertHelper.GetBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>Returns the specified 32-bit signed integer value as an array of bytes.</summary>
            <param name="value">The number to convert. </param>
            <param name="memory">a memory will be fill.</param>
            <param name="offset">fill begin offset.</param>
        </member>
        <member name="M:KJFramework.Messages.Helpers.BitConvertHelper.GetBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>Returns the specified 64-bit signed integer value as an array of bytes.</summary>
            <param name="value">The number to convert. </param>
            <param name="memory">a memory will be fill.</param>
            <param name="offset">fill begin offset.</param>
        </member>
        <member name="M:KJFramework.Messages.Helpers.BitConvertHelper.GetBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>Returns the specified 16-bit signed integer value as an array of bytes.</summary>
            <param name="value">The number to convert. </param>
            <param name="memory">a memory will be fill.</param>
            <param name="offset">fill begin offset.</param>
        </member>
        <member name="M:KJFramework.Messages.Helpers.BitConvertHelper.ConvertToByte(KJFramework.Messages.Types.BitFlag)">
            <summary>
                将一个BitFlag转换为内部的字节值
            </summary>
            <param name="bits">BitFlag</param>
            <returns>返回内部的字节值</returns>
        </member>
        <member name="T:KJFramework.Messages.Helpers.DefaultValue">
            <summary>
                记录了框架内设置的值类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.Boolean">
            <summary>
                bool类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.Char">
            <summary>
                char类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.Byte">
            <summary>
                byte类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.SByte">
            <summary>
                sbyte类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.Decimal">
            <summary>
                decimal类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.Int16">
            <summary>
                short类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.UInt16">
            <summary>
                ushort类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.Float">
            <summary>
                float类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.Int32">
            <summary>
                int类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.UInt32">
            <summary>
                uint类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.UInt64">
            <summary>
                ulong类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.Int64">
            <summary>
                long类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.Double">
            <summary>
                double类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.DateTime">
            <summary>
                DateTime类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.IntPtr">
            <summary>
                IntPtr类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.Guid">
            <summary>
                Guid类型默认值
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Helpers.DefaultValue.TimeSpan">
            <summary>
                TimeSpan类型默认值
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Helpers.FastInvokeHandler">
            <summary>
                为PropertyInfo的获取和设置提供解决方案
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Helpers.DynamicHelper">
            <summary>
                为PropertyInfo的获取和设置提供解决方案
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Helpers.FixedTypeManager">
            <summary>
                固定类型管理器，为固定字节数序列化/反序列化的能力提供基础支持
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Helpers.FixedTypeManager.#cctor">
            <summary>
                固定类型管理器，为固定字节数序列化/反序列化的能力提供基础支持
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Helpers.FixedTypeManager.IsVT(System.Type)">
            <summary>
                判断一个指定类型是否支持固定字节数序列化/反序列化
            </summary>
            <param name="type">要检测的类型</param>
            <returns></returns>
        </member>
        <member name="M:KJFramework.Messages.Helpers.FixedTypeManager.Add(System.Type,System.Int32)">
            <summary>
                将一个类型添加为支持固定字节数的序列化/反序列化
                <para>* 请在程序初始化的时候调用此方法</para>
            </summary>
            <param name="type">需要添加的类型</param>
            <param name="size">固定字节数</param>
            <returns>返回添加后的状态</returns>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
            <exception cref="T:System.ArgumentException">参数错误</exception>
        </member>
        <member name="T:KJFramework.Messages.Helpers.InstanceHelper">
            <summary>
                实例帮助器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Helpers.InstanceHelper.SetInstance(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                设置字段实例
            </summary>
            <param name="instance">对象实例</param>
            <param name="analyseResult">字段临时解析结构</param>
            <param name="data">元数据</param>
            <param name="offset">元数据偏移</param>
            <param name="length">元数据可用长度</param>
        </member>
        <member name="T:KJFramework.Messages.Helpers.IntellectObjectArrayHelper">
            <summary>
                智能类型数组帮助器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Helpers.IntellectObjectArrayHelper.GetFunc``1(System.Type)">
            <summary>
                获取指定类型的功能函数
            </summary>
            <param name="type">数组类型</param>
            <typeparam name="T">数组元素类型</typeparam>
            <returns>返回一个功能函数</returns>
        </member>
        <member name="T:KJFramework.Messages.Helpers.Size">
            <summary>
                内部用来保存每一个数据类型大小的容器
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Proxies.IMemorySegment">
            <summary>
                内存片段接口
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.GetPointer">
            <summary>
                获取内存段内部的数据起始位置指针
            </summary>
            <returns>返回数据起始位置指针</returns>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.Initialize">
            <summary>
                初始化当前内存片段
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.Skip(System.UInt32)">
            <summary>
                跳过指定字节长度
            </summary>
            <param name="length">需要跳过的字节长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteInt32(System.Int32*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteInt64(System.Int64*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteInt16(System.Int16*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteChar(System.Char)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteUInt32(System.UInt32*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteUInt64(System.UInt64*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteUInt16(System.UInt16*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteBoolean(System.Boolean)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteFloat(System.Single*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteDouble(System.Double*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteString(System.String)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteByte(System.Byte)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteSByte(System.SByte)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteDecimal(System.Decimal*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteDateTime(System.DateTime*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteIntPtr(System.IntPtr*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteGuid(System.Guid*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteBitFlag(KJFramework.Messages.Types.BitFlag)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteIPEndPoint(System.Net.IPEndPoint)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteTimeSpan(System.TimeSpan*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteMemory(System.IntPtr,System.UInt32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型值的内存地址</param>
            <param name="length">写入长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.WriteMemory(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="data">需要写入的内存</param>
            <param name="offset">起始内存偏移</param>
            <param name="length">写入长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegment.EnsureSize(System.UInt32,System.UInt32@)">
            <summary>
                确定当前内存片段是否还有足够的大小空间
            </summary>
            <param name="size">需求的空间大小</param>
            <param name="remainingSize">剩余长度 </param>
            <returns>返回判断后的结果</returns>
        </member>
        <member name="P:KJFramework.Messages.Proxies.IMemorySegment.RemainingSize">
            <summary>
                获取当前内存片段的剩余可用长度
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Proxies.IMemorySegment.Offset">
            <summary>
                获取当前内存片段的可用偏移
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Proxies.IMemorySegmentProxy">
            <summary>
                内存片段代理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.Skip(System.UInt32)">
            <summary>
                跳过指定字节长度
            </summary>
            <param name="length">需要跳过的字节长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteInt32(System.Int32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteInt64(System.Int64)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteInt64(System.Int64*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteInt16(System.Int16)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteChar(System.Char)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteUInt32(System.UInt32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteUInt64(System.UInt64)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteUInt64(System.UInt64*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteUInt16(System.UInt16)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteBoolean(System.Boolean)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteFloat(System.Single)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteDouble(System.Double)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteDouble(System.Double*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteString(System.String)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteByte(System.Byte)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteSByte(System.SByte)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteDecimal(System.Decimal)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteDecimal(System.Decimal*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteDateTime(System.DateTime)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteIntPtr(System.IntPtr)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteGuid(System.Guid)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteGuid(System.Guid*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteBackInt32(KJFramework.Messages.Proxies.MemoryPosition,System.Int32)">
            <summary>
                向指定内存段的指定偏移处回写一个int32数值
            </summary>
            <param name="position">回写位置</param>
            <param name="value">回写值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteBackInt16(KJFramework.Messages.Proxies.MemoryPosition,System.Int16)">
            <summary>
                向指定内存段的指定偏移处回写一个int16数值
            </summary>
            <param name="position">回写位置</param>
            <param name="value">回写值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteBackUInt16(KJFramework.Messages.Proxies.MemoryPosition,System.UInt16)">
            <summary>
                向指定内存段的指定偏移处回写一个uint16数值
            </summary>
            <param name="position">回写位置</param>
            <param name="value">回写值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteBackUInt32(KJFramework.Messages.Proxies.MemoryPosition,System.UInt32)">
            <summary>
                向指定内存段的指定偏移处回写一个uint32数值
            </summary>
            <param name="position">回写位置</param>
            <param name="value">回写值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteBackMemory(KJFramework.Messages.Proxies.MemoryPosition,System.Void*,System.UInt32)">
            <summary>
                向指定内存段的指定偏移处回写一个void*
            </summary>
            <param name="position">回写位置</param>
            <param name="value">回写值</param>
            <param name="length">回写长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteBitFlag(KJFramework.Messages.Types.BitFlag)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteIPEndPoint(System.Net.IPEndPoint)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteTimeSpan(System.TimeSpan)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteMemory(System.Void*,System.UInt32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型值的内存地址</param>
            <param name="length">写入长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.WriteMemory(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="data">需要写入的内存</param>
            <param name="offset">起始内存偏移</param>
            <param name="length">写入长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.GetPosition">
            <summary>
                获取一个当前内部缓冲区位置的记录点
            </summary>
            <returns>返回内部缓冲区位置的记录点</returns>
        </member>
        <member name="M:KJFramework.Messages.Proxies.IMemorySegmentProxy.GetBytes">
            <summary>
                获取内部的缓冲区内存
            </summary>
                <para>* 使用此方法后总是会强制回收内部资源</para>
            <returns>返回缓冲区内存</returns>
        </member>
        <member name="P:KJFramework.Messages.Proxies.IMemorySegmentProxy.SegmentCount">
            <summary>
                获取当前代理器内部所包含的内存片段个数
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Proxies.MemoryAllotter">
            <summary>
                内存申请器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemoryAllotter.#ctor">
            <summary>
                内存申请器
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Proxies.MemoryAllotter.SegmentSize">
            <summary>
                内存片段大小
                <para>* 取值范围: 64~1024，并且是64的倍数.</para>
                <para>* 单位: byte.</para>
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Proxies.MemoryAllotter.Multiples">
            <summary>
                倍数
                <para>* 当前申请的非托管内存大小 = Multiples*SegmentSize</para>
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Proxies.MemoryAllotter.AllowPrintInfo">
            <summary>
                获取或设置一个值，该值标示了是否允许在框架初始化的时候输出一些内部信息
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Proxies.MemoryAllotter.AllowCompatibleMode">
            <summary>
                获取或设置一个值，该值标示了当前框架的实体类解析操作是否支持兼容模式
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Proxies.MemoryAllotter.CharSizeCanAllcateAtStack">
            <summary>
                获取一个值，如果反序列化一个字符串的时候，该字符串的字节数量小于或者等于此值，则将会从线程栈上分配内存
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Proxies.MemoryAllotter.Instance">
            <summary>
                内存申请器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemoryAllotter.Initialize">
            <summary>
                初始化内存申请器
            </summary>
            <exception cref="T:System.ArgumentException">内部成员变量值不符合要求</exception>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemoryAllotter.Rent">
            <summary>
                租借一个新的内存段
            </summary>
            <returns>返回租借后的内存段</returns>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemoryAllotter.Giveback(KJFramework.Messages.Proxies.IMemorySegment)">
            <summary>
                租借一个新的内存段
            </summary>
            <returns>返回租借后的内存段</returns>
        </member>
        <member name="T:KJFramework.Messages.Proxies.MemoryPosition">
            <summary>
                内存位置基础结构
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemoryPosition.#ctor(System.Int32,System.UInt32)">
            <summary>
                内存位置基础结构
            </summary>
            <param name="index">内存片段索引</param>
            <param name="offset">内存片段偏移</param>
        </member>
        <member name="F:KJFramework.Messages.Proxies.MemoryPosition.SegmentIndex">
            <summary>
                内存片段索引
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Proxies.MemoryPosition.SegmentOffset">
            <summary>
                内存片段偏移
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemoryPosition.CalcLength(System.Int32,KJFramework.Messages.Proxies.MemoryPosition,KJFramework.Messages.Proxies.MemoryPosition)">
            <summary>
                计算截止位置与开始位置之间的距离
            </summary>
            <param name="segmentCount">内存段数量</param>
            <param name="start">起始位置</param>
            <param name="end">截止位置</param>
            <returns>返回它们之间所差的距离</returns>
        </member>
        <member name="T:KJFramework.Messages.Proxies.MemorySegment">
            <summary>
                内存片段
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.#ctor(System.Byte*,System.UInt32,System.UInt32)">
            <summary>
                内存片段
            </summary>
            <param name="data">总内存数据段</param>
            <param name="startOffset">当前内存段起始位置</param>
            <param name="length">当前内存段可用长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.GetPointer">
            <summary>
                获取内存段内部的数据起始位置指针
            </summary>
            <returns>返回数据起始位置指针</returns>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.Initialize">
            <summary>
                初始化当前内存片段
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.Skip(System.UInt32)">
            <summary>
                跳过指定字节长度
            </summary>
            <param name="length">需要跳过的字节长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteInt32(System.Int32*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteInt64(System.Int64*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteInt16(System.Int16*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteChar(System.Char)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteUInt32(System.UInt32*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteUInt64(System.UInt64*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteUInt16(System.UInt16*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteBoolean(System.Boolean)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteFloat(System.Single*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteDouble(System.Double*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteString(System.String)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteByte(System.Byte)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteSByte(System.SByte)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteDecimal(System.Decimal*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteDateTime(System.DateTime*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteIntPtr(System.IntPtr*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteGuid(System.Guid*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteBitFlag(KJFramework.Messages.Types.BitFlag)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteIPEndPoint(System.Net.IPEndPoint)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteTimeSpan(System.TimeSpan*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteMemory(System.IntPtr,System.UInt32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型值的内存地址</param>
            <param name="length">写入长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.WriteMemory(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="data">需要写入的内存</param>
            <param name="offset">起始内存偏移</param>
            <param name="length">写入长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegment.EnsureSize(System.UInt32,System.UInt32@)">
            <summary>
                确定当前内存片段是否还有足够的大小空间
            </summary>
            <param name="size">需求的空间大小</param>
            <param name="remainingSize">剩余长度 </param>
            <returns>返回判断后的结果</returns>
        </member>
        <member name="P:KJFramework.Messages.Proxies.MemorySegment.RemainingSize">
            <summary>
                获取当前内存片段的剩余可用长度
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Proxies.MemorySegment.Offset">
            <summary>
                获取当前内存片段的可用偏移
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Proxies.MemorySegmentProxy">
            <summary>
                内存片段代理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.#ctor">
            <summary>
                内存片段代理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.Skip(System.UInt32)">
            <summary>
                跳过指定字节长度
            </summary>
            <param name="length">需要跳过的字节长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteInt32(System.Int32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteInt64(System.Int64)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteInt64(System.Int64*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteInt16(System.Int16)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteChar(System.Char)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteUInt32(System.UInt32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteUInt64(System.UInt64)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteUInt64(System.UInt64*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteUInt16(System.UInt16)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteBoolean(System.Boolean)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteFloat(System.Single)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteDouble(System.Double)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteDouble(System.Double*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteString(System.String)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteByte(System.Byte)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteSByte(System.SByte)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteDecimal(System.Decimal)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteDecimal(System.Decimal*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteDateTime(System.DateTime)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteIntPtr(System.IntPtr)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteGuid(System.Guid)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteGuid(System.Guid*)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteBackInt32(KJFramework.Messages.Proxies.MemoryPosition,System.Int32)">
            <summary>
                向指定内存段的指定偏移处回写一个int32数值
            </summary>
            <param name="position">回写位置</param>
            <param name="value">回写值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteBackInt16(KJFramework.Messages.Proxies.MemoryPosition,System.Int16)">
            <summary>
                向指定内存段的指定偏移处回写一个int16数值
            </summary>
            <param name="position">回写位置</param>
            <param name="value">回写值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteBackUInt16(KJFramework.Messages.Proxies.MemoryPosition,System.UInt16)">
            <summary>
                向指定内存段的指定偏移处回写一个uint16数值
            </summary>
            <param name="position">回写位置</param>
            <param name="value">回写值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteBackUInt32(KJFramework.Messages.Proxies.MemoryPosition,System.UInt32)">
            <summary>
                向指定内存段的指定偏移处回写一个uint32数值
            </summary>
            <param name="position">回写位置</param>
            <param name="value">回写值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteBackMemory(KJFramework.Messages.Proxies.MemoryPosition,System.Void*,System.UInt32)">
            <summary>
                向指定内存段的指定偏移处回写一个void*
            </summary>
            <param name="position">回写位置</param>
            <param name="value">回写值</param>
            <param name="length">回写长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteBitFlag(KJFramework.Messages.Types.BitFlag)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteIPEndPoint(System.Net.IPEndPoint)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteTimeSpan(System.TimeSpan)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型的值</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteMemory(System.Void*,System.UInt32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="value">指定类型值的内存地址</param>
            <param name="length">写入长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.WriteMemory(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
                写入一个指定类型的值
            </summary>
            <param name="data">需要写入的内存</param>
            <param name="offset">起始内存偏移</param>
            <param name="length">写入长度</param>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.GetPosition">
            <summary>
                获取一个当前内部缓冲区位置的记录点
            </summary>
            <returns>返回内部缓冲区位置的记录点</returns>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxy.GetBytes">
            <summary>
                获取内部的缓冲区内存
                <para>* 使用此方法后总是会强制回收内部资源</para>
            </summary>
            <returns>返回缓冲区内存</returns>
        </member>
        <member name="P:KJFramework.Messages.Proxies.MemorySegmentProxy.SegmentCount">
            <summary>
                获取当前代理器内部所包含的内存片段个数
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Proxies.MemorySegmentProxyFactory">
            <summary>
                内存段代理器工厂
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Proxies.MemorySegmentProxyFactory.Create">
            <summary>
                创建一个新的内存段代理器
            </summary>
            <returns>返回</returns>
        </member>
        <member name="T:KJFramework.Messages.Structs.MarkRange">
            <summary>
                存储序列化byte数组的标识
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Structs.MarkRange.Id">
            <summary>
                存储对应Value值得标识
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Structs.MarkRange.Flag">
            <summary>
                存储对应Value值得标识
                *高位1 byte为Type Id号，及二进制流对应的存储类型 低位3bytes用于存放相应字段的offset*
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Stubs.IPropertySetStub">
            <summary>
                字段处理器存根接口
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Stubs.IPropertySetStub.Initialize(System.Reflection.MethodInfo)">
            <summary>
                初始化
            </summary>
            <param name="method">字段GetGet method</param>
        </member>
        <member name="M:KJFramework.Messages.Stubs.IPropertySetStub.Set``1(System.Object,``0)">
            <summary>
                设置字段值
            </summary>
            <typeparam name="T">字段类型</typeparam>
            <param name="target">字段所属类实例</param>
            <param name="value"> 字段的值</param>
            <returns>返回字段值</returns>
        </member>
        <member name="T:KJFramework.Messages.Stubs.IPropertyStub">
            <summary>
                字段处理器存根接口
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Stubs.IPropertyStub.Initialize(System.Reflection.MethodInfo)">
            <summary>
                初始化
            </summary>
            <param name="method">字段GetGet method</param>
        </member>
        <member name="M:KJFramework.Messages.Stubs.IPropertyStub.Get``1(System.Object)">
            <summary>
                获取字段值
            </summary>
            <typeparam name="T">字段类型</typeparam>
            <param name="target">字段所属类实例</param>
            <returns>返回字段值</returns>
        </member>
        <member name="T:KJFramework.Messages.Stubs.PropertySetStubHelper">
            <summary>
                字段存根帮助器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Stubs.PropertySetStubHelper.Create(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="instanceType">目标对象类型</param>
            <param name="paramsType">参数类型</param>
            <returns>返回创建后的字段处理器存根</returns>
        </member>
        <member name="T:KJFramework.Messages.Stubs.PropertyStubHelper">
            <summary>
                字段存根帮助器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Stubs.PropertyStubHelper.Create(System.Type,System.Type,System.Reflection.MethodInfo)">
            <summary>
                创建一个新的字段处理器存根
            </summary>
            <param name="targetType">目标对象类型</param>
            <param name="outputType">字段类型</param>
            <param name="method">字段GetGet method</param>
            <returns>   </returns>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.BlobIntellectTypeProcessor">
            <summary>
                大数据块对象处理器
            </summary>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor">
            <summary>
                智能的类型处理器抽象父类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor">
            <summary>
                智能的类型处理器元接口，提供了对于特定类型特定处理能力的基础支持。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的便宜量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="P:KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor.Id">
            <summary>
                获取唯一编号
            </summary>
        </member>
        <member name="P:KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor.SupportUnmanagement">
            <summary>
                获取一个值，该值标示了当前处理器是否支持以非托管的方式进行执行
            </summary>
        </member>
        <member name="P:KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor.SupportedId">
            <summary>
                获取或设置一个值，该值表示了当前需要处理的Id编号。
                <para>* 当一个智能对象的属性集合中存在指定的编号属性，则将会交给此类型处理器处理。</para>
                <para>* 当SupportedId == null时，代表了当前智能类型处理器不关心属性的ID，只关心属性的类型。</para>
            </summary>
        </member>
        <member name="P:KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor.SupportedType">
            <summary>
                获取支持的类型
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor.#ctor">
            <summary>
                智能的类型处理器抽象父类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="P:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor.Statistics">
            <summary>
            获取或设置统计器
            </summary>
        </member>
        <member name="P:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor.Id">
            <summary>
                获取唯一编号
            </summary>
        </member>
        <member name="P:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor.SupportUnmanagement">
            <summary>
                获取一个值，该值标示了当前处理器是否支持以非托管的方式进行执行
            </summary>
        </member>
        <member name="P:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor.SupportedId">
            <summary>
                获取或设置一个值，该值表示了当前需要处理的Id编号。
                <para>* 当一个智能对象的属性集合中存在指定的编号属性，则将会交给此类型处理器处理。</para>
                <para>* 当SupportedId == null时，代表了当前智能类型处理器不关心属性的ID，只关心属性的类型。</para>
            </summary>
        </member>
        <member name="P:KJFramework.Messages.TypeProcessors.IntellectTypeProcessor.SupportedType">
            <summary>
                获取支持的类型
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BlobIntellectTypeProcessor.#ctor">
            <summary>
                大数据块对象处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BlobIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BlobIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BlobIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BlobIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.BooleanArrayIntellectTypeProcessor">
            <summary>
                Boolean数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BooleanArrayIntellectTypeProcessor.#ctor">
            <summary>
                Boolean数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BooleanArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BooleanArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BooleanArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BooleanArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的便宜量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.DoubleArrayIntellectTypeProcessor">
            <summary>
                Double数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DoubleArrayIntellectTypeProcessor.#ctor">
            <summary>
                Double数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DoubleArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DoubleArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DoubleArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DoubleArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.FloatArrayIntellectTypeProcessor">
            <summary>
                Float数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.FloatArrayIntellectTypeProcessor.#ctor">
            <summary>
                Float数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.FloatArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.FloatArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.FloatArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.FloatArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.GuidArrayIntellectTypeProcessor">
            <summary>
                Guid数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.GuidArrayIntellectTypeProcessor.#ctor">
            <summary>
                Guid数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.GuidArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.GuidArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.GuidArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.GuidArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.Int16ArrayIntellectTypeProcessor">
            <summary>
                short数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int16ArrayIntellectTypeProcessor.#ctor">
            <summary>
                int数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int16ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int16ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int16ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int16ArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.Int64ArrayIntellectTypeProcessor">
            <summary>
                long数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int64ArrayIntellectTypeProcessor.#ctor">
            <summary>
                long数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int64ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int64ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int64ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int64ArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="M:KJFramework.Messages.Helpers.IntellectObjectHelper.SetDataId(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                将一个元数据搭上编号
            </summary>
            <param name="value">元数据</param>
            <param name="id">编号</param>
            <param name="vt">值类型标示</param>
            <returns>返回搭上编号后的元数据</returns>
        </member>
        <member name="T:KJFramework.Messages.Objects.TempParseStruct">
            <summary>
                中转用的解析结构体
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Objects.TempParseStruct.Data">
            <summary>
                获取或设置二进制数据
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Objects.TempParseStruct.AnalyzeResult">
            <summary>
                获取或设置分析结果
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Objects.VT">
            <summary>
                固定字节类型的基础支持
            </summary>
        </member>
        <member name="P:KJFramework.Messages.Objects.VT.Size">
            <summary>
                获取或设置固定字节数
            </summary>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.BitFlagIntellectTypeProcessor">
            <summary>
                BitFlag位标示类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BitFlagIntellectTypeProcessor.#ctor">
            <summary>
                智能的类型处理器抽象父类，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BitFlagIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BitFlagIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BitFlagIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BitFlagIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的便宜量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.BooleanIntellectTypeProcessor">
            <summary>
               Boolean类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BooleanIntellectTypeProcessor.#ctor">
            <summary>
                Boolean类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BooleanIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BooleanIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BooleanIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.BooleanIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的便宜量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.ByteArrayIntellectTypeProcessor">
            <summary>
               Byte Array类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.ByteArrayIntellectTypeProcessor.#ctor">
            <summary>
                Byte Array类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.ByteArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.ByteArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.ByteArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.ByteArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.ByteIntellectTypeProcessor">
            <summary>
               Byte类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.ByteIntellectTypeProcessor.#ctor">
            <summary>
                Byte类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.ByteIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.ByteIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.ByteIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.ByteIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.CharIntellectTypeProcessor">
            <summary>
               Char类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.CharIntellectTypeProcessor.#ctor">
            <summary>
                Char类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.CharIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.CharIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.CharIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.CharIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.DecimalIntellectTypeProcessor">
            <summary>
               Decimal类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DecimalIntellectTypeProcessor.#ctor">
            <summary>
                Decimal类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DecimalIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DecimalIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DecimalIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DecimalIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.Int32ArrayIntellectTypeProcessor">
            <summary>
                int数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int32ArrayIntellectTypeProcessor.#ctor">
            <summary>
                int数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int32ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int32ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int32ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int32ArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.IPEndPointIntellectTypeProcessor">
            <summary>
                IPEndPoint类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IPEndPointIntellectTypeProcessor.#ctor">
            <summary>
                IPEndPoint类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IPEndPointIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IPEndPointIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IPEndPointIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
            从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param><param name="data">元数据</param>
            <returns>
            返回转换后的第三方客户数据
            </returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IPEndPointIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.Maps.ArrayTypeProcessorMapping">
            <summary>
                数组类型处理器映射表，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.ArrayTypeProcessorMapping.#ctor">
            <summary>
                智能的类型处理器映射表，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.ArrayTypeProcessorMapping.Initialize">
            <summary>
                初始化所有系统内部提供的智能类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.ArrayTypeProcessorMapping.Regist(KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor)">
            <summary>
                注册一个智能类型处理器
                <para>* 如果该类型的处理器已经存在，则进行替换操作。</para>
            </summary>
            <param name="processor">智能类型处理器</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.ArrayTypeProcessorMapping.UnRegist(System.Type)">
            <summary>
                注销一个具有指定支持类型的智能类型处理器
            </summary>
            <param name="supportedType">支持的处理类型</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.ArrayTypeProcessorMapping.GetProcessor(System.Type)">
            <summary>
                获取一个具有指定支持类型的智能类型处理器
            </summary>
            <param name="supportedType">支持的处理类型</param>
            <returns>返回智能类型处理器</returns>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.SByteIntellectTypeProcessor">
            <summary>
               SByte类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.SByteIntellectTypeProcessor.#ctor">
            <summary>
                SByte类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.SByteIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.SByteIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.SByteIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.SByteIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.GuidIntellectTypeProcessor">
            <summary>
               Guid类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.GuidIntellectTypeProcessor.#ctor">
            <summary>
                Guid类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.GuidIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.GuidIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.GuidIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.GuidIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.IntPtrIntellectTypeProcessor">
            <summary>
               IntPtr类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntPtrIntellectTypeProcessor.#ctor">
            <summary>
                IntPtr类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntPtrIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntPtrIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntPtrIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntPtrIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.DateTimeIntellectTypeProcessor">
            <summary>
               DateTime类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DateTimeIntellectTypeProcessor.#ctor">
            <summary>
                DateTime类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DateTimeIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DateTimeIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DateTimeIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DateTimeIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.StringIntellectTypeProcessor">
            <summary>
               String类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.StringIntellectTypeProcessor.#ctor">
            <summary>
                String类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.StringIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.StringIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.StringIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.StringIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.TimeSpanIntellectTypeProcessor">
            <summary>
                TimeSpan结构类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.TimeSpanIntellectTypeProcessor.#ctor">
            <summary>
                TimeSpan结构类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.TimeSpanIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.TimeSpanIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.TimeSpanIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.TimeSpanIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.UInt16IntellectTypeProcessor">
            <summary>
                UInt16类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt16IntellectTypeProcessor.#ctor">
            <summary>
                UInt16类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt16IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt16IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt16IntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt16IntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.UInt64IntellectTypeProcessor">
            <summary>
                UInt64类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt64IntellectTypeProcessor.#ctor">
            <summary>
                UInt64类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt64IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt64IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt64IntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt64IntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.UInt32IntellectTypeProcessor">
            <summary>
                UInt32类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt32IntellectTypeProcessor.#ctor">
            <summary>
                UInt32类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt32IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt32IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt32IntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt32IntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.DoubleIntellectTypeProcessor">
            <summary>
               Double类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DoubleIntellectTypeProcessor.#ctor">
            <summary>
                Double类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DoubleIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DoubleIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DoubleIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DoubleIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.FloatIntellectTypeProcessor">
            <summary>
                Float类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.FloatIntellectTypeProcessor.#ctor">
            <summary>
                Float类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.FloatIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.FloatIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.FloatIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.FloatIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.Int16IntellectTypeProcessor">
            <summary>
                Int16类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int16IntellectTypeProcessor.#ctor">
            <summary>
                Int16类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int16IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int16IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int16IntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int16IntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.Int64IntellectTypeProcessor">
            <summary>
                Int64类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int64IntellectTypeProcessor.#ctor">
            <summary>
                Int64类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int64IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int64IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int64IntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int64IntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.Int32IntellectTypeProcessor">
            <summary>
                Int32类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int32IntellectTypeProcessor.#ctor">
            <summary>
                Int32类型智能处理器，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int32IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int32IntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int32IntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Int32IntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.Maps.IntellectTypeProcessorMapping">
            <summary>
                智能的类型处理器映射表，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.IntellectTypeProcessorMapping.#ctor">
            <summary>
                智能的类型处理器映射表，提供了相关的基本操作。
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.IntellectTypeProcessorMapping.Initialize">
            <summary>
                初始化所有系统内部提供的智能类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.IntellectTypeProcessorMapping.Regist(KJFramework.Messages.TypeProcessors.IIntellectTypeProcessor)">
            <summary>
                注册一个智能类型处理器
                <para>* 如果该类型的处理器已经存在，则进行替换操作。</para>
            </summary>
            <param name="processor">智能类型处理器</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.IntellectTypeProcessorMapping.UnRegist(System.Type)">
            <summary>
                注销一个具有指定支持类型的智能类型处理器
            </summary>
            <param name="supportedType">支持的处理类型</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.IntellectTypeProcessorMapping.GetProcessor(System.Type)">
            <summary>
                获取一个具有指定支持类型的智能类型处理器
            </summary>
            <param name="supportedType">支持的处理类型</param>
            <returns>返回智能类型处理器</returns>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.Maps.IntellectTypeProcessorMapping.GetProcessor(System.Int32)">
            <summary>
                获取一个具有指定支持顺序编号的智能类型处理器
            </summary>
            <param name="id">顺序编号</param>
            <returns>返回智能类型处理器</returns>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.CharArrayIntellectTypeProcessor">
            <summary>
                Char数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.CharArrayIntellectTypeProcessor.#ctor">
            <summary>
                Boolean数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.CharArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.CharArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.CharArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.CharArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.DateTimeArrayIntellectTypeProcessor">
            <summary>
                DateTime数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DateTimeArrayIntellectTypeProcessor.#ctor">
            <summary>
                DateTime数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DateTimeArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DateTimeArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DateTimeArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DateTimeArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.DecimalArrayIntellectTypeProcessor">
            <summary>
                Decimal数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DecimalArrayIntellectTypeProcessor.#ctor">
            <summary>
                Decimal数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DecimalArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DecimalArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DecimalArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.DecimalArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.IntPtrArrayIntellectTypeProcessor">
            <summary>
                IntPtr数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntPtrArrayIntellectTypeProcessor.#ctor">
            <summary>
                IntPtr数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntPtrArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntPtrArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntPtrArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IntPtrArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.SByteArrayIntellectTypeProcessor">
            <summary>
                SByte数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.SByteArrayIntellectTypeProcessor.#ctor">
            <summary>
                SByte数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.SByteArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.SByteArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.SByteArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.SByteArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.TimeSpanArrayIntellectTypeProcessor">
            <summary>
                TimeSpan数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.TimeSpanArrayIntellectTypeProcessor.#ctor">
            <summary>
                TimeSpan数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.TimeSpanArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.TimeSpanArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.TimeSpanArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.TimeSpanArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.UInt16ArrayIntellectTypeProcessor">
            <summary>
                UInt16数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt16ArrayIntellectTypeProcessor.#ctor">
            <summary>
                UInt16数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt16ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt16ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt16ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt16ArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的便宜量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.UInt32ArrayIntellectTypeProcessor">
            <summary>
                UInt32数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt32ArrayIntellectTypeProcessor.#ctor">
            <summary>
                UInt32数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt32ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt32ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt32ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt32ArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.UInt64ArrayIntellectTypeProcessor">
            <summary>
                UInt64数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt64ArrayIntellectTypeProcessor.#ctor">
            <summary>
                UInt64数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt64ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt64ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt64ArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.UInt64ArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.StringArrayIntellectTypeProcessor">
            <summary>
                String数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.StringArrayIntellectTypeProcessor.#ctor">
            <summary>
                String数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.StringArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.StringArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.StringArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.StringArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.TypeProcessors.IPEndPointArrayIntellectTypeProcessor">
            <summary>
                IPEndPoint数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IPEndPointArrayIntellectTypeProcessor.#ctor">
            <summary>
                IPEndPoint数组类型处理器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IPEndPointArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.Attributes.IntellectPropertyAttribute,KJFramework.Messages.Analysers.ToBytesAnalyseResult,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="attribute">字段属性</param>
            <param name="analyseResult">分析结果</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IPEndPointArrayIntellectTypeProcessor.Process(KJFramework.Messages.Proxies.IMemorySegmentProxy,System.Object,System.Boolean,System.Boolean)">
            <summary>
                从第三方客户数据转换为元数据
                <para>* 此方法将会被轻量级的DataHelper所使用，并且写入的数据将不会拥有编号(Id)</para>
            </summary>
            <param name="proxy">内存片段代理器</param>
            <param name="target">目标对象实例</param>
            <param name="isArrayElement">当前写入的值是否为数组元素标示</param>
            <param name="isNullable">是否为可空字段标示</param>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IPEndPointArrayIntellectTypeProcessor.Process(KJFramework.Messages.Attributes.IntellectPropertyAttribute,System.Byte[])">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="attribute">当前字段标注的属性</param>
            <param name="data">元数据</param>
            <returns>返回转换后的第三方客户数据</returns>
            <exception cref="N:KJFramework.Exception">转换失败</exception>
        </member>
        <member name="M:KJFramework.Messages.TypeProcessors.IPEndPointArrayIntellectTypeProcessor.Process(System.Object,KJFramework.Messages.Analysers.GetObjectAnalyseResult,System.Byte[],System.Int32,System.Int32)">
            <summary>
                从元数据转换为第三方客户数据
            </summary>
            <param name="instance">目标对象</param>
            <param name="result">分析结果</param>
            <param name="data">元数据</param>
            <param name="offset">元数据所在的偏移量</param>
            <param name="length">元数据长度</param>
        </member>
        <member name="T:KJFramework.Messages.Types.BitFlag">
            <summary>
                位标示表示类
                <para>* 可容纳8位的标示.</para>
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Types.BitFlag.#ctor">
            <summary>
                位标示表示类
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Types.BitFlag.#ctor(System.Byte)">
            <summary>
                位标示表示类
            </summary>
            <param name="value">初始值</param>
        </member>
        <member name="M:KJFramework.Messages.Types.BitFlag.GetData">
            <summary>
                获取内部所包含的数据
            </summary>
            <returns>返回内部所包含的数据</returns>
        </member>
        <member name="M:KJFramework.Messages.Types.BitFlag.ToString">
            <summary>
                返回内部可呈现的内容结构
            </summary>
            <returns>返回内部可呈现的内容结构</returns>
        </member>
        <member name="P:KJFramework.Messages.Types.BitFlag.Item(System.Int32)">
            <summary>
                获取或设置指定索引位的值
            </summary>
            <param name="index">索引</param>
            <returns>返回相应的值</returns>
            <exception cref="T:System.ArgumentException">非法的索引</exception>
        </member>
        <member name="T:KJFramework.Messages.Types.Blob">
            <summary>
                大数据对象，使用此对象的场景在于需要对元数据进行压缩传输
                <para>* 使用Blob类型进行数据传输，虽然会减少传输数据的长度但是要增加压缩/解压缩的时间成本，请慎用。</para>
                <para>* 默认使用GZIP方式进行压缩/解压缩</para>
            </summary>
        </member>
        <member name="M:KJFramework.Messages.Types.Blob.#ctor(System.Byte[])">
            <summary>
                大数据对象，使用此对象的场景在于需要对元数据进行压缩传输
                <para>* 使用Blob类型进行数据传输，虽然会减少传输数据的长度但是要增加压缩/解压缩的时间成本，请慎用。</para>
                <para>* 默认使用GZIP方式进行压缩/解压缩</para>
                <para>* 使用此构造传入的数据为 *完全构造数据*</para>
            </summary>
            <param name="networkData">完全构造数据</param>
        </member>
        <member name="M:KJFramework.Messages.Types.Blob.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
                大数据对象，使用此对象的场景在于需要对元数据进行压缩传输
                <para>* 使用Blob类型进行数据传输，虽然会减少传输数据的长度但是要增加压缩/解压缩的时间成本，请慎用。</para>
                <para>* 默认使用GZIP方式进行压缩/解压缩</para>
                <para>* 使用此构造传入的数据为 *完全构造数据*</para>
            </summary>
            <param name="networkData">完全构造数据</param>
            <param name="index">可用位置起始偏移</param>
            <param name="count">可用长度</param>
        </member>
        <member name="M:KJFramework.Messages.Types.Blob.#ctor(KJFramework.Messages.Enums.CompressionTypes,System.Byte[])">
            <summary>
                大数据对象，使用此对象的场景在于需要对元数据进行压缩传输
                <para>* 使用Blob类型进行数据传输，虽然会减少传输数据的长度但是要增加压缩/解压缩的时间成本，请慎用。</para>
                <para>* 默认使用GZIP方式进行压缩/解压缩</para>
            </summary>
            <param name="type">使用的压缩类型</param>
            <param name="rawData">元数据</param>
        </member>
        <member name="M:KJFramework.Messages.Types.Blob.Compress">
            <summary>
                使用指定的方式压缩内部数据，并返回压缩后的数据
            </summary>
            <returns>返回压缩后的字节数据</returns>
        </member>
        <member name="M:KJFramework.Messages.Types.Blob.Decompress">
            <summary>
                使用指定的方式压缩内部数据，并返回压缩后的数据
            </summary>
            <returns>返回压缩后的字节数据</returns>
        </member>
        <member name="M:KJFramework.Messages.Types.Blob.GetCompressionStream(System.IO.Stream)">
            <summary>
                根据指定的压缩类型获取压缩流
            </summary>
            <param name="inputStream">原始流</param>
            <returns>返回压缩输出流</returns>
        </member>
        <member name="M:KJFramework.Messages.Types.Blob.GetDecompressionStream(System.IO.Stream)">
            <summary>
                根据指定的压缩类型获取解压缩流
            </summary>
            <param name="inputStream">原始流</param>
            <returns>返回解压缩输出流</returns>
        </member>
        <member name="M:KJFramework.Messages.Types.Blob.ToString">
            <summary>
                输出压缩比信息
            </summary>
            <returns>返回压缩比信息</returns>
        </member>
        <member name="M:KJFramework.Messages.Types.Blob.ToString(System.String)">
            <summary>
                输出压缩比信息
            </summary>
            <para>输出格式的对齐长度</para>
            <returns>返回压缩比信息</returns>
        </member>
        <member name="P:KJFramework.Messages.Types.Blob.CompressionType">
            <summary>
                获取内部使用的压缩算法类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.Enums.PropertyTypes">
            <summary>
                所支持存储的类型枚举
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Boolean">
            <summary>
                Bool类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Byte">
            <summary>
                Byte类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.SByte">
            <summary>
                Sbyte类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Char">
            <summary>
                Char类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Int16">
            <summary>
                Int16类型 
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.UInt16">
            <summary>
                UInt16类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Int32">
            <summary>
                Int32类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.UInt32">
            <summary>
                UInt32类型 
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Int64">
            <summary>
                Int64类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.UInt64">
            <summary>
                UInt64类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Float">
            <summary>
                Float类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Double">
            <summary>
                Double类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Decimal">
            <summary>
                Decimal类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.String">
            <summary>
                string类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.DateTime">
            <summary>
                DateTime类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Guid">
            <summary>
                Guid类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.IPEndPoint">
            <summary>
                IPEndPoint类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.IntPtr">
            <summary>
                IntPtr类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.TimeSpan">
            <summary>
                TimeSpan类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.BitFlag">
            <summary>
                BitFlag类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Blob">
            <summary>
                Blob类型 
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.ResourceBlock">
            <summary>
               ResourceBlock类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Null">
            <summary>
                Null值类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.BooleanArray">
            <summary>
                Boolean数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.ByteArray">
            <summary>
                Byte数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.SByteArray">
            <summary>
                SByte数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.CharArray">
            <summary>
                Char数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Int16Array">
            <summary>
                Int16数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.UInt16Array">
            <summary>
                UInt16数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Int32Array">
            <summary>
                Int32数组类型     
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.UInt32Array">
            <summary>
                UInt32数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.Int64Array">
            <summary>
                Int64数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.UInt64Array">
            <summary>
                UInt64数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.FloatArray">
            <summary>
                Float数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.DoubleArray">
            <summary>
                Double数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.DecimalArray">
            <summary>
                Decimal数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.StringArray">
            <summary>
                string数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.DateTimeArray">
            <summary>
                DateTime数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.GuidArray">
            <summary>
                Guid数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.IPEndPointArray">
            <summary>
                IPEndPoint数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.IntPtrArray">
            <summary>
                IntPtr数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.TimeSpanArray">
            <summary>
                TimeSpan数组类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.IntellectObject">
            <summary>
                智能对象类型
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.IntellectObjectArray">
            <summary>
                智能对象数组类型 
            </summary>
        </member>
        <member name="F:KJFramework.Messages.Enums.PropertyTypes.ResourceBlockArray">
            <summary>
               ResourceBlock数组类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.BitFlagValueStored">
            <summary>
                BitFlag类型的存储
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.BaseValueStored">
            <summary>
                存储对象字段的基类
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BaseValueStored.#ctor">
            <summary>
                存储对象字段的基类
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BaseValueStored.GetValue``1">
            <summary>
                获取当前类型的存储Value值
            </summary>
            <typeparam name="T">内部值类型</typeparam>
            <returns>返回内部所包含的值</returns>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BaseValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BaseValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BaseValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.BaseValueStored.TypeId">
            <summary>
                类型ID
            </summary>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.BaseValueStored.IsNull">
            <summary>
                是否为null值
            </summary>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.BaseValueStored.IsExtension">
            <summary>
                是否为扩展类型
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BitFlagValueStored.#ctor">
            <summary>
                BitFlag类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BitFlagValueStored.#ctor(KJFramework.Messages.Types.BitFlag)">
            <summary>
                BitFlag类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BitFlagValueStored.#cctor">
            <summary>
                BitFlag类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BitFlagValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BitFlagValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BitFlagValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BitFlagValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.BlobValueStored">
            <summary>
                Blob类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BlobValueStored.#ctor">
            <summary>
                Blob类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BlobValueStored.#ctor(KJFramework.Messages.Types.Blob)">
            <summary>
                Blob类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BlobValueStored.#cctor">
            <summary>
                Blob类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BlobValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BlobValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BlobValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BlobValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.BooleanArrayValueStored">
            <summary>
                Boolean数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanArrayValueStored.#ctor">
            <summary>
                Boolean数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanArrayValueStored.#ctor(System.Boolean[])">
            <summary>
                Boolean数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanArrayValueStored.#cctor">
            <summary>
                Boolean数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.ByteArrayDataProcessor">
            <summary>
                Byte数组关于元数据的处理
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.IDataProcessor">
            <summary>
                用于元数据转换成第三方数据的数据处理接口
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.IDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.IDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.IDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.ByteArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.ByteArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.ByteArrayDataProcessor.TypeId">
            <summary>
                元数据转换成第三方数据
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.DateTimeArrayDataProcessor">
            <summary>
                DateTime数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.DateTimeArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.DateTimeArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.DateTimeArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.DecimalArrayDataProcessor">
            <summary>
                Decimal数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.DecimalArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.DecimalArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.DecimalArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.DoubleArrayDataProcessor">
            <summary>
                Double数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.DoubleArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.DoubleArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.DoubleArrayDataProcessor.TypeId">
            <summary>
                当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.FloatArrayDataProcessor">
            <summary>
                Float数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.FloatArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.FloatArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.FloatArrayDataProcessor.TypeId">
            <summary>
                当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.GuidArrayDataProcessor">
            <summary>
                Guid数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.GuidArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.GuidArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.GuidArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.Int16ArrayDataProcessor">
            <summary>
                Int16数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Int16ArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Int16ArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.Int16ArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.Int32ArrayDataProcessor">
            <summary>
                Int32数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Int32ArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Int32ArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.Int32ArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.Int64ArrayDataProcessor">
            <summary>
                Int64数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Int64ArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Int64ArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.Int64ArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.IntellectObjectArrayDataProcessor">
            <summary>
                IntellectObject数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.IntellectObjectArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.IntellectObjectArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.IntellectObjectArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.IntellectObjectDataProcessor">
            <summary>
                IntellectObject关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.IntellectObjectDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.IntellectObjectDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.IntellectObjectDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.IntPtrArrayDataProcessor">
            <summary>
                IntPtr数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.IntPtrArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.IntPtrArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.IntPtrArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.IPEndPointArrayDataProcessor">
            <summary>
                IPEndPoint数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.IPEndPointArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.IPEndPointArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.IPEndPointArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.Mapping.ExtensionTypeMapping">
            <summary>
                可扩展类型处理器映射
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.ExtensionTypeMapping.Regist(System.Type)">
            <summary>
                注册扩展类型数据valueStored
            </summary>
            <param name="type">数据处理器类型</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.ExtensionTypeMapping.GetValueStored(System.Byte)">
            <summary>
                返回一个指定扩展类型数据valueStored
            </summary>
            <param name="typeId">数据类型</param>
            <returns>返回一个数组处理器</returns>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.ExtensionTypeMapping.RemoveValueStored(System.Byte)">
            <summary>
                注销一个指定扩展类型数据valueStored
            </summary>
            <param name="typeId">数据类型</param>
            <returns>返回一个数组处理器</returns>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.Mapping.SystemTypeMapping">
            <summary>
                可扩展类型处理器映射
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.SystemTypeMapping.#ctor">
            <summary>
                SystemTypeMapping对象生成器
            </summary>
        </member>
        <member name="F:KJFramework.Messages.ValueStored.DataProcessor.Mapping.SystemTypeMapping.Instance">
            <summary>
                 返回一个SystemTypeMapping的实例
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.SystemTypeMapping.Initialize">
            <summary>
               初始化
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.SystemTypeMapping.Regist(KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                注册扩展类型数据valueStored
            </summary>
            <param name="valueStored">数据处理器实例</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.SystemTypeMapping.GetValueStored(System.Byte)">
            <summary>
                返回一个指定扩展类型数据valueStored
            </summary>
            <param name="typeId">数据类型</param>
            <returns>返回一个数组处理器</returns>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.SystemTypeMapping.RemoveValueStored(System.Byte)">
            <summary>
                注销一个指定扩展类型数据valueStored
            </summary>
            <param name="typeId">数据类型</param>
            <returns>返回一个数组处理器</returns>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.ProcessorDictionary">
            <summary>
                用于处理非数组类型的集合类
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.ProcessorDictionary.InitializeValueProcessorDictionary">
            <summary>
                初始化普通类型第三方数据转元数据的处理器
            </summary>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.ProcessorDictionary.InitializeDataProcessorDictionary">
            <summary>
                初始化普通类型元数据转第三方数据的处理器
            </summary>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.ResourceBlockArrayDataProcessor">
            <summary>
                ResourceBlock数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.ResourceBlockArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.ResourceBlockArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.ResourceBlockArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.SByteArrayDataProcessor">
            <summary>
                SByte数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.SByteArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.SByteArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.SByteArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.StringArrayDataProcessor">
            <summary>
                String数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.StringArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.StringArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.StringArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.TimeSpanArrayDataProcessor">
            <summary>
                TimeSpan数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.TimeSpanArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.TimeSpanArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.TimeSpanArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.UInt16ArrayDataProcessor">
            <summary>
                UInt16数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.UInt16ArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.UInt16ArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.UInt16ArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.UInt32ArrayDataProcessor">
            <summary>
                UInt32数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.UInt32ArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.UInt32ArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.UInt32ArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.UInt64ArrayDataProcessor">
            <summary>
                UInt64数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.UInt64ArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.UInt64ArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.UInt64ArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DateTimeArrayValueStored">
            <summary>
                DateTime数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeArrayValueStored.#ctor">
            <summary>
                DateTime数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeArrayValueStored.#ctor(System.DateTime[])">
            <summary>
                DateTime数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeArrayValueStored.#cctor">
            <summary>
                DateTime数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DecimalArrayValueStored">
            <summary>
                Decimal数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalArrayValueStored.#ctor">
            <summary>
                Decimal数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalArrayValueStored.#ctor(System.Decimal[])">
            <summary>
                Decimal数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalArrayValueStored.#cctor">
            <summary>
                Decimal数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DoubleArrayValueStored">
            <summary>
                Double数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleArrayValueStored.#ctor">
            <summary>
                Double数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleArrayValueStored.#ctor(System.Double[])">
            <summary>
                Double数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleArrayValueStored.#cctor">
            <summary>
                Double数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.FloatArrayValueStored">
            <summary>
                Float数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatArrayValueStored.#ctor">
            <summary>
                Float数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatArrayValueStored.#ctor(System.Single[])">
            <summary>
                Float数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatArrayValueStored.#cctor">
            <summary>
                Float数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.GuidArrayValueStored">
            <summary>
                Guid数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidArrayValueStored.#ctor">
            <summary>
                Guid数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidArrayValueStored.#ctor(System.Guid[])">
            <summary>
                Guid数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidArrayValueStored.#cctor">
            <summary>
                Guid数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.Helper.IntellectObjectHelper">
            <summary>
                    处理智能对象帮助类
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Helper.IntellectObjectHelper.BindIntellectObject(KJFramework.Messages.Contracts.IntellectObject)">
            <summary>
              将一个IntellectObject转换成byte数组的形式
            </summary>
            <param name="value">值</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Helper.IntellectObjectHelper.BindIntellectObjectArray(KJFramework.Messages.Contracts.IntellectObject[])">
            <summary>
              将一个IntellectObject数组转换成byte数组的形式
            </summary>
            <param name="value">值</param>
            <exception cref="T:KJFramework.Messages.Exceptions.UnexpectedValueException">结果错误</exception>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Helper.IntellectObjectHelper.BindIntellectObjectArrayMethod(KJFramework.Messages.Contracts.IntellectObject[])">
            <summary>
              将一个IntellectObject数组转换成byte数组的形式
            </summary>
            <param name="value">值</param>
            <exception cref="T:KJFramework.Messages.Exceptions.UnexpectedValueException">结果错误</exception>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Helper.IntellectObjectHelper.GetAttributeAsIntellectObject``1(KJFramework.Messages.ValueStored.IntellectObjectValueStored)">
            <summary>
                返回一个IntellectObject
            </summary>
            <param name="intellectObjectValueStored">智能对象存储类型</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Helper.IntellectObjectHelper.GetAttributeAsIntellectObjectArray``1(KJFramework.Messages.ValueStored.IntellectObjectArrayValueStored)">
            <summary>
              返回一个IntellectObject数组
            </summary>
            <param name="intellectObjectArrayValueStored">智能对象数组存储类型</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.Int16ArrayValueStored">
            <summary>
                Int16数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ArrayValueStored.#ctor">
            <summary>
                Int16数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ArrayValueStored.#ctor(System.Int16[])">
            <summary>
                Int16数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ArrayValueStored.#cctor">
            <summary>
                Int16数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.Int64ArrayValueStored">
            <summary>
                Int64数组对象类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ArrayValueStored.#ctor">
            <summary>
                Int64数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ArrayValueStored.#ctor(System.Int64[])">
            <summary>
                Int64数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ArrayValueStored.#cctor">
            <summary>
                Int64数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.IntellectObjectValueStored">
            <summary>
                IntellectObject类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectValueStored.#ctor">
            <summary>
                IntellectObject类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectValueStored.#ctor(System.Byte[])">
            <summary>
                IntellectObject类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectValueStored.#cctor">
            <summary>
                IntellectObject类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.IntPtrArrayValueStored">
            <summary>
                IntPtr数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrArrayValueStored.#ctor">
            <summary>
                IntPtr数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrArrayValueStored.#ctor(System.IntPtr[])">
            <summary>
                IntPtr数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrArrayValueStored.#cctor">
            <summary>
                IntPtr数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.IPEndPointArrayValueStored">
            <summary>
                IPEndPoint数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointArrayValueStored.#ctor">
            <summary>
                IPEndPoint数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointArrayValueStored.#ctor(System.Net.IPEndPoint[])">
            <summary>
                IPEndPoint数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointArrayValueStored.#cctor">
            <summary>
                IPEndPoint数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.NullValueStored">
            <summary>
                空类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.NullValueStored.#ctor">
            <summary>
                空类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.NullValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.NullValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.NullValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.NullValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.ResourceBlockArrayStored">
            <summary>
                ResourceBlock数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockArrayStored.#ctor">
            <summary>
                ResourceBlock数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockArrayStored.#ctor(KJFramework.Messages.Types.ResourceBlock[])">
            <summary>
                ResourceBlock数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockArrayStored.#cctor">
            <summary>
                ResourceBlock数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockArrayStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockArrayStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockArrayStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockArrayStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.SByteArrayValueStored">
            <summary>
                SByte数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteArrayValueStored.#ctor">
            <summary>
                SByte数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteArrayValueStored.#ctor(System.SByte[])">
            <summary>
                SByte数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteArrayValueStored.#cctor">
            <summary>
                SByte数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.BooleanValueStored">
            <summary>
                Boolean类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanValueStored.#ctor">
            <summary>
                Boolean类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanValueStored.#ctor(System.Boolean)">
            <summary>
                Boolean类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanValueStored.#cctor">
            <summary>
                Boolean类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.BooleanValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.ByteArrayValueStored">
            <summary>
                Byte数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteArrayValueStored.#ctor">
            <summary>
                Byte数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteArrayValueStored.#ctor(System.Byte[])">
            <summary>
                Byte数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteArrayValueStored.#cctor">
            <summary>
                Byte数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.ByteValueStored">
            <summary>
                Byte类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteValueStored.#ctor">
            <summary>
                Byte类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteValueStored.#ctor(System.Byte)">
            <summary>
                Byte类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteValueStored.#cctor">
            <summary>
                Byte类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ByteValueStored.Clone">
            <summary>
                返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.CharArrayValueStored">
            <summary>
                Char数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharArrayValueStored.#ctor">
            <summary>
                Char数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharArrayValueStored.#ctor(System.Char[])">
            <summary>
                Char数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharArrayValueStored.#cctor">
            <summary>
                Char数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.CharValueStored">
            <summary>
                Char类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharValueStored.#ctor">
            <summary>
                Char类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharValueStored.#ctor(System.Char)">
            <summary>
                Char类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharValueStored.#cctor">
            <summary>
                Char类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.CharValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.BooleanArrayDataProcessor">
            <summary>
                Boolean数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.BooleanArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.BooleanArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.BooleanArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.CharArrayDataProcessor">
            <summary>
                Char数组关于元数据的处理
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.CharArrayDataProcessor.DataProcessor(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
                元数据转换成第三方数据
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.CharArrayDataProcessor.ValueProcessor(KJFramework.Messages.Proxies.IMemorySegmentProxy,KJFramework.Messages.ValueStored.BaseValueStored)">
            <summary>
                第三方数据转换成元数据
            </summary>
            <param name="proxy">内存段实例</param>
            <param name="baseValueMessage">存储属性的实例对象</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="P:KJFramework.Messages.ValueStored.DataProcessor.CharArrayDataProcessor.TypeId">
            <summary>
                获取当前处理的第三方数据类型
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DataProcessor.Mapping.DataProcessorMapping">
            <summary>
                DataProcessor对象生成器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.DataProcessorMapping.#ctor">
            <summary>
                DataProcessor对象生成器
            </summary>
        </member>
        <member name="F:KJFramework.Messages.ValueStored.DataProcessor.Mapping.DataProcessorMapping.Instance">
            <summary>
                 返回一个DataProcessor的实例
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.DataProcessorMapping.Initialize">
            <summary>
               初始化
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.DataProcessorMapping.Regist(KJFramework.Messages.ValueStored.DataProcessor.IDataProcessor)">
            <summary>
                注册数组数据处理器
            </summary>
            <param name="processor">数据处理器实例</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DataProcessor.Mapping.DataProcessorMapping.GetProcessor(KJFramework.Messages.Enums.PropertyTypes)">
            <summary>
                返回一个指定数组的数据处理器
            </summary>
            <param name="typeId">数据处理器类型</param>
            <returns>返回一个数组处理器</returns>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DateTimeValueStored">
            <summary>
                DateTime类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeValueStored.#ctor">
            <summary>
                DateTime类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeValueStored.#ctor(System.DateTime)">
            <summary>
                DateTime类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeValueStored.#cctor">
            <summary>
                DateTime类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DateTimeValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DecimalValueStored">
            <summary>
                Decimal类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalValueStored.#ctor">
            <summary>
                Decimal类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalValueStored.#ctor(System.Decimal)">
            <summary>
                Decimal类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalValueStored.#cctor">
            <summary>
                Decimal类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DecimalValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.DoubleValueStored">
            <summary>
                Double类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleValueStored.#ctor">
            <summary>
                Double类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleValueStored.#ctor(System.Double)">
            <summary>
                Double类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleValueStored.#cctor">
            <summary>
                Double类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.DoubleValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.FloatValueStored">
            <summary>
                Float类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatValueStored.#ctor">
            <summary>
                Float类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatValueStored.#ctor(System.Single)">
            <summary>
                Float类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatValueStored.#cctor">
            <summary>
                Float类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.FloatValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.GuidValueStored">
            <summary>
                Guid类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidValueStored.#ctor">
            <summary>
                Guid类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidValueStored.#ctor(System.Guid)">
            <summary>
                Guid类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidValueStored.#cctor">
            <summary>
                Guid类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.GuidValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.Int16ValueStored">
            <summary>
                Int16类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ValueStored.#ctor">
            <summary>
                Int16类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ValueStored.#ctor(System.Int16)">
            <summary>
                Int16类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ValueStored.#cctor">
            <summary>
                Int16类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int16ValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.Int32ArrayValueStored">
            <summary>
                Int32数组对象类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ArrayValueStored.#ctor">
            <summary>
                Int32数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ArrayValueStored.#ctor(System.Int32[])">
            <summary>
                Int32数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ArrayValueStored.#cctor">
            <summary>
                Int32数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.Int32ValueStored">
            <summary>
                Int32类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ValueStored.#ctor">
            <summary>
                Int32类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ValueStored.#ctor(System.Int32)">
            <summary>
                Int32类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ValueStored.#cctor">
            <summary>
                Int32类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int32ValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.Int64ValueStored">
            <summary>
                Int64类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ValueStored.#ctor">
            <summary>
                Int64类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ValueStored.#ctor(System.Int64)">
            <summary>
                Int64类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ValueStored.#cctor">
            <summary>
                Int64类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.Int64ValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.IntellectObjectArrayValueStored">
            <summary>
                智能数组对象类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectArrayValueStored.#ctor">
            <summary>
                智能数组对象类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectArrayValueStored.#ctor(System.Byte[])">
            <summary>
                智能数组对象类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectArrayValueStored.#cctor">
            <summary>
                智能数组对象类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntellectObjectArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.IntPtrValueStored">
            <summary>
                IntPtr类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrValueStored.#ctor">
            <summary>
                IntPtr类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrValueStored.#ctor(System.IntPtr)">
            <summary>
                IntPtr类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrValueStored.#cctor">
            <summary>
                IntPtr类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IntPtrValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.IPEndPointValueStored">
            <summary>
                IPEndPoint类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointValueStored.#ctor">
            <summary>
                IPEndPoint类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointValueStored.#ctor(System.Net.IPEndPoint)">
            <summary>
                IPEndPoint类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointValueStored.#cctor">
            <summary>
                IPEndPoint类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.IPEndPointValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.SByteValueStored">
            <summary>
                SByte类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteValueStored.#ctor">
            <summary>
                SByte类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteValueStored.#ctor(System.SByte)">
            <summary>
                SByte类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteValueStored.#cctor">
            <summary>
                Byte类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.SByteValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.StringArrayValueStored">
            <summary>
                string数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringArrayValueStored.#ctor">
            <summary>
                string数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringArrayValueStored.#ctor(System.String[])">
            <summary>
                string数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringArrayValueStored.#cctor">
            <summary>
                string数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.TimeSpanArrayValueStored">
            <summary>
                TimeSpan数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanArrayValueStored.#ctor">
            <summary>
                TimeSpan数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanArrayValueStored.#ctor(System.TimeSpan[])">
            <summary>
                TimeSpan数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanArrayValueStored.#cctor">
            <summary>
                TimeSpan数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.TimeSpanValueStored">
            <summary>
                TimeSpan类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanValueStored.#ctor">
            <summary>
                TimeSpan类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanValueStored.#ctor(System.TimeSpan)">
            <summary>
                TimeSpan类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanValueStored.#cctor">
            <summary>
                TimeSpan类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.TimeSpanValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.UInt16ArrayValueStored">
            <summary>
                UInt16数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ArrayValueStored.#ctor">
            <summary>
                UInt16数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ArrayValueStored.#ctor(System.UInt16[])">
            <summary>
                UInt16数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ArrayValueStored.#cctor">
            <summary>
                UInt16数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.UInt16ValueStored">
            <summary>
                UInt16类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ValueStored.#ctor">
            <summary>
                UInt16类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ValueStored.#ctor(System.UInt16)">
            <summary>
                UInt16类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ValueStored.#cctor">
            <summary>
                UInt16类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt16ValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.UInt32ArrayValueStored">
            <summary>
                UInt32数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ArrayValueStored.#ctor">
            <summary>
                UInt32数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ArrayValueStored.#ctor(System.UInt32[])">
            <summary>
                UInt32数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ArrayValueStored.#cctor">
            <summary>
                UInt32数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.UInt32ValueStored">
            <summary>
                UInt32类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ValueStored.#ctor">
            <summary>
                UInt32类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ValueStored.#ctor(System.UInt32)">
            <summary>
                UInt32类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ValueStored.#cctor">
            <summary>
                UInt32类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt32ValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.StoredHelper.PropertyValueStored`1">
            <summary>
                值类型存储的动态生成抽象类
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StoredHelper.PropertyValueStored`1.Get``1(`0)">
            <summary>
                获取设置的存储value值
            </summary>
            <param name="value">内部值</param>
            <typeparam name="K">内部值的真实类型</typeparam>
            <returns>返回转换后的内部值</returns>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.StoredHelper.ValueStoredHelper">
            <summary>
                用于Value值存储的帮忙类
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StoredHelper.ValueStoredHelper.BuildMethod``1">
            <summary>
                返回具体类型的对象存储实例
            </summary>
            <typeparam name="T">处理的类型</typeparam>
            <returns>返回一个动态实例</returns>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.StringValueStored">
            <summary>
                String类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringValueStored.#ctor">
            <summary>
                String类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringValueStored.#ctor(System.String)">
            <summary>
                String类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringValueStored.#cctor">
            <summary>
                String类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.StringValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.UInt64ArrayValueStored">
            <summary>
                UInt64数组类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ArrayValueStored.#ctor">
            <summary>
                UInt64数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ArrayValueStored.#ctor(System.UInt64[])">
            <summary>
                UInt64数组类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ArrayValueStored.#cctor">
            <summary>
                UInt64数组类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ArrayValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ArrayValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ArrayValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ArrayValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.UInt64ValueStored">
            <summary>
                UInt64类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ValueStored.#ctor">
            <summary>
                UInt64类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ValueStored.#ctor(System.UInt64)">
            <summary>
                UInt64类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ValueStored.#cctor">
            <summary>
                UInt64类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ValueStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ValueStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ValueStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.UInt64ValueStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
        <member name="T:KJFramework.Messages.ValueStored.ResourceBlockStored">
            <summary>
                ResourceBlock类型的存储
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockStored.#ctor">
            <summary>
                ResourceBlock类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockStored.#ctor(KJFramework.Messages.Types.ResourceBlock)">
            <summary>
                ResourceBlock类型存储的初始化构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockStored.#cctor">
            <summary>
                ResourceBlock类型存储的静态构造器
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockStored.GetValue``1">
            <summary>
                获取存储的对应类型的Value值
            </summary>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockStored.ToBytes(KJFramework.Messages.Proxies.IMemorySegmentProxy)">
            <summary>
              内部指定类型序列化方法
            </summary>
            <param name="proxy">内存代理器</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockStored.ToData(KJFramework.Messages.Contracts.MetadataContainer,System.Byte,System.Byte[],System.Int32,System.UInt32)">
            <summary>
              内部指定类型反序列化方法
            </summary>
            <param name="metadataObject">元数据集合</param>
            <param name="id">属性对应key</param>
            <param name="data">属性对应byte数组</param>
            <param name="offsetStart">属性在数组中的偏移值</param>
            <param name="length">属性在byte数组中的长度</param>
        </member>
        <member name="M:KJFramework.Messages.ValueStored.ResourceBlockStored.Clone">
            <summary>
              返回一个实例对象
            </summary>
        </member>
    </members>
</doc>
